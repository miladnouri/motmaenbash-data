name: Data Validation and Security Check

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'data/**'
      - '*.py'
      - 'requirements.txt'
  pull_request:
    branches: [ main ]
    paths:
      - 'data/**'
      - '*.py'
      - 'requirements.txt'
  workflow_dispatch:

jobs:
  validate-data:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        python-version: [3.9, '3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov bandit safety
    
    - name: Run security scan
      run: |
        echo "Running security scan..."
        bandit -r . -f json -o bandit-report.json -ll || true
        safety check --json --output safety-report.json || true
    
    - name: Validate data integrity
      run: |
        echo "Validating data integrity..."
        python simple_validator.py --data-dir data --report validation-report.json
        
    - name: Test data optimization
      run: |
        echo "Testing data optimization..."
        python -c "
        import json
        import gzip
        import os
        
        # Simple optimization test
        try:
            with open('data/data.json', 'r') as f:
                data = json.load(f)
            
            # Create optimized version
            optimized = json.dumps(data, separators=(',', ':'), ensure_ascii=False)
            with open('test_optimized.json', 'w') as f:
                f.write(optimized)
            
            # Create compressed version
            compressed = gzip.compress(optimized.encode('utf-8'))
            with open('test_optimized.json.gz', 'wb') as f:
                f.write(compressed)
                
            original_size = os.path.getsize('data/data.json')
            optimized_size = os.path.getsize('test_optimized.json')
            compressed_size = os.path.getsize('test_optimized.json.gz')
            
            print(f'Original: {original_size} bytes')
            print(f'Optimized: {optimized_size} bytes') 
            print(f'Compressed: {compressed_size} bytes')
            print(f'Compression ratio: {compressed_size/original_size:.2%}')
            
        except Exception as e:
            print(f'Optimization test failed: {e}')
        "
        
    - name: Simple API manager test
      run: |
        echo "Testing API manager..."
        python -c "
        print('Testing basic API management concepts...')
        
        # Simple rate limiting test
        import time
        
        class SimpleRateLimiter:
            def __init__(self, max_requests=10, time_window=60):
                self.max_requests = max_requests
                self.time_window = time_window
                self.requests = []
                
            def can_make_request(self):
                now = time.time()
                self.requests = [req for req in self.requests if now - req < self.time_window]
                return len(self.requests) < self.max_requests
                
            def record_request(self):
                self.requests.append(time.time())
                
        # Test rate limiter
        limiter = SimpleRateLimiter(max_requests=5, time_window=60)
        
        for i in range(7):
            if limiter.can_make_request():
                limiter.record_request()
                print(f'Request {i+1}: Allowed')
            else:
                print(f'Request {i+1}: Rate limited')
                
        print('Rate limiting test completed')
        "
        
    - name: Validate JSON syntax
      run: |
        echo "Validating JSON syntax..."
        find data/ -name "*.json" -exec python -m json.tool {} \; >/dev/null
        
    - name: Check data statistics
      run: |
        echo "Generating data statistics..."
        python -c "
        import json
        import os
        
        def analyze_data():
            data_dir = 'data'
            stats = {}
            
            for filename in os.listdir(data_dir):
                if filename.endswith('.json'):
                    file_path = os.path.join(data_dir, filename)
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            data = json.load(f)
                            
                        if filename == 'data.json':
                            total_categories = len(data)
                            total_entries = sum(len(cat) for cat in data)
                            
                            stats['data.json'] = {
                                'categories': total_categories,
                                'entries': total_entries
                            }
                        else:
                            stats[filename] = {
                                'items': len(data) if isinstance(data, list) else 1,
                                'size_kb': round(os.path.getsize(file_path) / 1024, 2)
                            }
                            
                    except Exception as e:
                        stats[filename] = {'error': str(e)}
                        
            print('Data Statistics:')
            print(json.dumps(stats, indent=2))
            
        analyze_data()
        "
        
    - name: Upload reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: validation-reports-${{ matrix.python-version }}
        path: |
          validation-report.json
          bandit-report.json
          safety-report.json
          test_optimized.json
        retention-days: 30
        
    - name: Check validation results
      run: |
        echo "Checking validation results..."
        if [ -f "validation-report.json" ]; then
          echo "Validation report exists"
          python -c "
          import json
          with open('validation-report.json', 'r') as f:
              report = json.load(f)
          
          summary = report.get('validation_summary', {})
          print(f'Validation passed: {summary.get(\"validation_passed\", False)}')
          print(f'Errors: {summary.get(\"errors\", 0)}')
          print(f'Warnings: {summary.get(\"warnings\", 0)}')
          
          if summary.get('errors', 0) > 0:
              print('❌ Validation failed with errors')
              exit(1)
          else:
              print('✅ Validation passed')
          "
        else
          echo "No validation report found"
        fi